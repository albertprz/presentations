#+REVEAL_HLEVEL: 1
#+REVEAL_INIT_OPTIONS: transition: 'cube'
#+REVEAL_THEME: moon
#+EXPORT_AUTHOR: Alberto Perez Lopez
#+OPTIONS: toc:nil


#+title: Functional Design in Scala

* Explicit composition

- Some kind of composition is almost always necessary when designing complex systems.

- Explicit composition can be a means to achieve a simple, modular and clear design.

- Scala favours explicit composition of operations (i.e: higher order combinators) in contrast to other languages that go for a more implicit approach.


* Composition in the small

** Contextual abstractions

- Notion of composing operations within an specific context.

- Unified API completely agnostic about the context \\
   => Programming to an Interface, not an implementation.

- The decision on which context the operations will be ran on can be taken by the caller \\
   => Inversion of Control.


*** Applicative style

Used for sequencing independent operations

Without a context
#+BEGIN_SRC scala
def createUser
  (userId: String): Unit =

  log.info ("Processing user: " + userId) ;
    persistUserInDB  (userId) ;
    dispatchNewUserEvent (userId)
#+END_SRC

Within a context
#+BEGIN_SRC scala
def createUser [F[_]: Applicative]
  (userId: String): F[Unit] =

  log.info ("Processing user: " + userId) *>
    persistUserInDB  (userId) *>
    dispatchNewUserEvent (userId)
#+END_SRC


*** Monadic style

Used for sequencing dependent operations

Without a context
#+BEGIN_SRC scala
def formatFile
  (inputPath: String, outputPath: String): Unit

  readFile(inputPath)
    .pipe(callFormatProcess)
    .pipe(writeFile(outputPath))
#+END_SRC

Within a context
#+BEGIN_SRC scala
def formatFile [F[_]: Monad]
  (inputPath: String, outputPath: String): F[Unit]

  readFile(inputPath)
    .flatMap(callFormatProcess)
    .flatMap(writeFile(outputPath))
#+END_SRC


*** Arrow style

Used for sequencing dependent operations \\
 (via functional composition)

Without a context
#+BEGIN_SRC scala
def formatFile
  (outputPath: String): Function1[String, Unit]

  readFile
    .andThen(callFormatProcess)
    .andThen(writeFile(outputPath))
#+END_SRC

Within a context
#+BEGIN_SRC scala
def formatFile [F[_, _]: Arrow]
  (outputPath: String): F[String, Unit]

  readFile
    .compose(callFormatProcess)
    .compose(writeFile(outputPath))
#+END_SRC


*** Applicative vs Monadic style

- Applicative provides the least power capability necessary to combine contextful operations.

- A monadic API can be more expressive, but it also constraints the instances that can be defined.

- Applicative independent operations can in some ocasions be ran in parallel / concurrently.

#+begin_src scala

    case class UserWithProducts (user: User, products: Set[Product])

    def getUser[F[_]: Async] (userId: UserId): F[User]
    def getProducts[F[_]: Async] (userId: UserId): F[Set[Product]]

    def getUserInfo [F[_]: Async] (userId: UserId): F[UserWithProducts] =
      (getUser(userId), getProducts(userId)).parMapN(UserWithProducts)

#+end_src


* Composition in the large

** Dependency Injection

- Notion of giving access to necessary capabilities provided in an environment and cascaded down to each of the components.

- This environment of dependencies can be switched freely (mocking, staging/prod configs).

- Promotes thinking about an application in terms of a hierarchical tree of components that just have access to a limited set of capabilities and resources.


*** Tagless Final

#+BEGIN_SRC scala
trait DBOps [F[_]]:
    def fetchAllDocuments: DbConnection ?=> F[Document]

trait LoggerOps [F[_]]:
    def log: Logger ?=> String => F[Unit]

object StagingLogger extends LoggerOps[IO]:
    def log = (logger: Logger) ?=> x => IO.delay(logger.log(x))

object ProdLogger extends LoggerOps[Id]:
    def log = (logger: Logger) ?=> x => ()

object TestLogger extends LoggerOps[IO]:
    val loggerQueue: Queue[IO, String]
    def log = (logger: Logger) ?=> x => loggerQueue.offer(x)


object DocumentService:
    def listDocuments [F[_]: DBOps : LoggerOps : Applicative]
        (using DbConnection, Logger): F[Document] =
      LoggerOps[F].log("Fetching documents ...") *>
      DBOps[F].fetchAllDocuments
#+END_SRC


*** ReaderT pattern

#+BEGIN_SRC scala
trait DBOps [F[_]]:
    def fetchAllDocuments: DbConnection ?=> F[Document]

case class AppEnv(config: Config,
                  db: DBOps,
                  logger: LoggerOps,
                  kafka: KafkaOps,
                  httpClient: HttpClient)

type AppM [A] = ReaderT [IO, AppEnv, A]

trait HasDBOps[F[_]]:
    def apply(): F[DbOps]

object AppDBOps extends HasDBOps[AppM]:
    def apply() = ask.map(_.db)


object DocumentService:
    def listDocuments [F[_]: HasDBOps : HasLoggerOps : Applicative]
        (using DbConnection, Logger): F[Document] =
      HasLoggerOps[F].map(_.log("Fetching documents ...")) *>
      HasDBOps[F].map(_.fetchAllDocuments)
#+END_SRC

*** Tagless Final vs ReaderT pattern

- In Tagless Final, all capabilities are injected as typeclass instances for the effect type.

- In the ReaderT pattern, all capabilities are injected by the environment provided and can be overriden at compile time by the HasX typeclasses or at runtime by modifying the environment (local fn).

* Conclusions

 - Composition in the small techniques aim is to build business processes in terms of simple operations via explicit sequencing of these operations.

 - Composition in the large techniques aim is to build applications in terms of components / resources via explicit dependency graphs.

 - Leveraging both strategies when designing an application can guarantee modularity and testability.
