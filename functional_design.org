#+REVEAL_HLEVEL: 1
#+REVEAL_INIT_OPTIONS: transition: 'cube'
#+REVEAL_THEME: moon
#+EXPORT_AUTHOR: Alberto Perez Lopez

#+title: Functional Design in Scala

* Explicit composition
- Some kind of composition is almost always necessary when designing complex systems
- Explicit composition can be a useful principle in order to achieve a simple, modular and clear design
- Scala favours explicit composition (ususally through higher order combinators / DSLs) in contrast to many languages that favour a more implicit ad-hoc approach to composition

* Composition in the small

** Contextual abstractions
- Notion of composing operations within an specific context
- Unified API completely agnostic about the context \\
   => Programming to an Interface, not an implementation
- The decision which context the operations will be ran on, can sometimes be taken by the caller for context polymorphic functions \\
   => Inversion of Control

*** Applicative style

Used for sequencing independent operations

Without a context
#+BEGIN_SRC scala
def createUser
  (userId: String): Unit =

  log.info ("Processing user: " + userId) ;
    persistUserInDB  userId ;
    sendNewUserEvent userId
#+END_SRC

Within a context
#+BEGIN_SRC scala
def createUser [F[_]: Applicative]
  (userId: String): F[Unit] =

  log.info ("Processing user: " + userId) *>
    persistUserInDB  userId *>
    sendNewUserEvent userId
#+END_SRC

*** Monadic style

Used for sequencing dependent operations

Without a context
#+BEGIN_SRC scala
def formatFile
  (inputPath: String, outputPath: String): Unit

  readFile(inputPath)
    .pipe(callFormatProcess)
    .pipe(writeFile(outputPath))
#+END_SRC

Within a context
#+BEGIN_SRC scala
def formatFile [F[_]: Monad]
  (inputPath: String, outputPath: String): F[Unit]

  readFile(inputPath)
    .flatMap(callFormatProcess)
    .flatMap(writeFile(outputPath))
#+END_SRC


*** Arrow style

Used for sequencing dependent operations \\
 (via function composition)

Without a context
#+BEGIN_SRC scala
def formatFile
  (outputPath: String): Function1[String, Unit]

  readFile
    .andThen(callFormatProcess)
    .andThen(writeFile(outputPath))
#+END_SRC

Within a context
#+BEGIN_SRC scala
def formatFile [F[_, _]: Arrow]
  (outputPath: String): F[String, Unit]

  readFile
    >>> callFormatProcess
    >>> writeFile(outputPath)
#+END_SRC


* Composition in the large

** Dependency Injection
- Notion of giving access to necessary operations / resources provided in an environment generated in the application entry point

- This environment of dependencies can be switched freely, for example for tests or for staging / prod configurations
